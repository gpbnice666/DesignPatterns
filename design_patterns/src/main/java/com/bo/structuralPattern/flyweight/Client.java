package com.bo.structuralPattern.flyweight;

/**
 * @author gpb
 * 客户端
 * 动机
 *      　面向对象技术可以很好地解决一些灵活性或可扩展性问题，但在很多情况下需要在系统中增加类和对象的个数。当对象数量太多时，
 *      将导致运行代价过高，带来性能下降等问题。享元模式正是为解决这一类问题而诞生的。享元模式通过共享技术实现相同或相似对象的重用
 *      在享元模式中可以共享的相同内容成为内部状态,而那些需要外部环境来设置的不能共享的内容被称为外部状态
 *      其中外部状态和内部状态是相互独立的,外部状态的变化不会引起内部状态的变化，由于区分了内部状态和外部状态
 *      因此可用通过设置不同的外部状态是的相同的对象可具有一些不同的特征,而相同的对象的内部状态可以共享,也就是说
 *      享元模式的本质是分离与共享,分离变与不变,把一个对象的状态分成内部状态和外部状态,内部状态即使不不变的,外部状体是变化的
 *      然后通过共享不变的部分，达到减少对象数量并节约内存的目的
 *
 *      在享元模式中通常会出项工厂模式,需要创建一个享元工厂来负责为一个享元池(Flyweight Pool)用于存储具有相同内部状体的享元对象
 *      在享元中,共享的是享元对象的内部状态,外部状态需要通过环境来设置，在实际使用中,能够共享的内部状态是有限的,因此享元对象一般都设计为
 *      较小的对象,它所包含的内部状态较少,这个对象也成为细粒度对象
 *  目的
 *      享元模式的目的就是使用共享技术来实现大量的细粒度对象的服用
 *   定义与结构
 *          享元模式(Flyweight Pattern)：运用共享技术有效地支持大量细粒度对象的复用。
 *          系统只使用少量的对象，而这些对象都很相似，状态变化很小，可以实现对象的多次复用。
 *          由于 享元模式要求能够共享的对象必须是细粒度对象，因此它又称为轻量级模式，它是一种 对象结构型模式。
 *  模式所涉及的角色
 *   Flyweight： 享元接口，通过这个接口传入外部状态并作用于外部状态；
 * 　ConcreteFlyweight： 具体的享元实现对象，必须是可共享的，需要封装享元对象的内部状态；
 * 　UnsharedConcreteFlyweight： 非共享的享元实现对象，并不是所有的享元对象都可以共享，非共享的享元对象通常是享元对象的组合对象；
 * 　FlyweightFactory： 享元工厂，主要用来创建并管理共享的享元对象，并对外提供访问共享享元的接口；
 *
 * 享元模式与其他模式的联用
 *
 * 　　在享元模式的享元工厂类中通常提供一个静态的工厂方法用于返回享元对象，使用 简单工厂模式来生成享元对象；
 *
 * 　　在一个系统中，通常只有唯一一个享元工厂，因此享元工厂类可以使用单例模式进行设计；
 *
 * 　　享元模式可以结合组合模式形成复合享元模式，统一对享元对象设置外部状态。
 *  模式分析
 *      享元模式是一个 考虑系统性能的设计模式，通过使用享元模式可以节约内存空间，提高系统的性能。
 *      　享元模式的核心在于享元工厂类，享元工厂类的作用在于提供一个用于存储享元对象的享元池，
 *      用户需要对象时，首先从享元池中获取，如果享元池中不存在，则创建一个新的享元对象返回给用户，并在享元池中保存该新增对象。
 *      享元模式以共享的方式高效地支持大量的细粒度对象，
 *      享元对象能做到共享的关键是区分内部状态(Internal State)和外部状态(External State)。其中：
 *  内部状态
 *      是存储在享元对象内部并且不会随环境改变而改变的状态，因此内部状态可以共享
 *   外部状态
 *     是随环境改变而改变的、不可以共享的状态。享元对象的外部状态必须由客户端保存，
 *     并在享元对象被创建之后，在需要使用的时候再传入到享元对象内部。一个外部状态与另一个外部状态之间是相互独立的
 * 广义上讲，在JDK类库中定义的String类也是使用享元模式的典型。
 * 模式适用环境
 *      一个系统有大量相同或者相似的对象，由于这类对象的大量使用，造成内存的大量耗费；
 *      对象的大部分状态都可以外部化，可以将这些外部状态传入对象中(细粒度对象)；
 *     使用享元模式需要维护一个存储享元对象的享元池，而这需要耗费资源，因此，应当在多次重复使用享元对象时才值得使用享元模式。
 *  模式的优点
 *      　　（1）它可以极大减少内存中对象的数量，使得相同对象或相似对象在内存中只保存一份；
 *           2）享元模式的外部状态相对独立，而且不会影响其内部状态，从而使得享元对象可以在不同的环境中被共享。
 *   模式的缺点
 * 　　（1）享元模式使得系统更加复杂，需要分离出内部状态和外部状态，这使得程序的逻辑复杂化；
 * 　　（2）为了使对象可以共享，享元模式需要将享元对象的状态外部化，而读取外部状态使得运行时间变长
 *  模式的实现
 *        享元模式运用共享技术有效地支持大量 细粒度对象的复用。系统只使用少量的对象，而这些对象都很相似，状态变化很小，可以实现对象的多次复用，它是一种对象结构型模式。
 *
 *       享元模式包含四个角色：抽象享元类声明一个接口，通过它可以接受并作用于外部状态；
 *       具体享元类实现了抽象享元接口，其实例称为享元对象；非共享具体享元是不能被共享的抽象享元类的子类；
 *       享元工厂类用于创建并管理享元对象，它针对抽象享元类编程，将各种类型的具体享元对象存储在一个享元池中。
 *
 *      享元模式以共享的方式高效地支持大量的细粒度对象，享元对象能做到共享的关键是区分内部状态和外部状态。
 *       其中内部状态是存储在享元对象内部并且不会随环境改变而改变的状态，因此内部状态可以共享；外部状态是随环境改变而改变的、不可以共享的状态
 */
public class Client {
    public static void main(String[] args) {

        FlyweightFactory flyweightFactory = new FlyweightFactory();

        Flyweight a = flyweightFactory.factory('a');

        a.operation("First Call");

        a = flyweightFactory.factory(new Character('b'));
        a.operation("Second Call");

        Flyweight a1 = flyweightFactory.factory('a');
        Flyweight a2 = flyweightFactory.factory('a');
        System.out.println(  a2 == a1);
//        FlyweightFactory factory = new FlyweightFactory();
//        Flyweight fly = factory.factory(new Character('a'));
//        fly.operation("First Call");
//
//        fly = factory.factory(new Character('b'));
//        fly.operation("Second Call");
//
//        Flyweight a = factory.factory(new Character('a'));
//        fly.operation("Third Call");
//
//        System.out.println(a==fly);
//        System.out.println(a);
//        System.out.println(fly);
    }
}
