创建型模式：
    单例模式(singletion)
    抽象工厂模式(abstractFactory)
    建造者模式(builder)
    工厂模式(factory)
    原型模式(prototype)
    模板方法(templateMethod)



单例模式(singletion):
        保证一个类仅有一个实例，并提供一个访问它的全局访问点。
        单例模式是最简单的设计模式之一，但是对于Java的开发者来说，它却有很多缺陷。
        探讨了单例模式以及在面对多线程（multithreading)、类装载器（classloaders）和序列化(serialization)时如何处理这些缺陷

抽象工厂模式(abstractFactory):
        提供一个创建一系列相关或相互依赖对象的接口，而无需指定它们具体的类。

建造者模式(builder):
        将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。

工厂模式(factory):
    为子系统中的一组接口提供一个一致的界面， F a c a d e模式定义了一个高层接口，这个接口使得这一子系统更加容易使用

原型模式(prototype):
    用原型实例指定创建对象的种类，并且通过拷贝这个原型来创建新的对象

模板方法(templateMethod):
    将公共的方法抽取出来,他的具体实现,交给他具体的子类完成不同实现

