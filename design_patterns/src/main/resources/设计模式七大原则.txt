单一职责
      单一职责,又称为单一功能原则,意思为是指类变化的原因,单一职责规定
  一个类应该有且仅有一个引起他变化的原因,否则类应该被差分,该原则提出对
  象不应该承担太多职责,如果一个对象承担了太多的职责,至少存在一下两个
  缺点：
       一个职责的变化可能会削弱或者抑制这个类实现其他职责的能力
       当客户端需要该对象的某一个职责时,不得不将其他不需要的职责
       职责全都包含进来,从而造成多余代码或代码浪费

开闭原则
   软件应对扩展开发,对修改关闭(修改意思为 使用方)
       软件实体包括一下几个部分
                   项目中划分的模块
                   类与接口
                   方法
   作用：
        对软件测试的影响
           软件遵循开闭原则的话,软件测试之需要对扩展的代码进行测试就可以了,因为原有的测试代码仍然
           能够正常运行
        可以提高代码的可用性
            粒度越小,被复用的可能性就越大;在面向对象的程序设计中,根据原子和抽象编程可以提高代码的可复用性
        可以提高软件的可维护性
            遵守开闭原则的软件,其稳定性高和延续性强,从而易与扩展和维护
   实现方法
        抽象约束
            抽象是对一组事物的通用描述,没有具体实现,也就表示他可以用非常多
            可能性,可以根随需求的变化而变化。因此,通过接口或抽象类可以约束一组可能
            变化的行为,并且能够实现对扩展开发
            三层含义
                  通过接口或抽象类约束扩散，对扩展进行边界限定，不允许出现在接口或抽象类中不存在的public方法。
                  参数类型，引用对象尽量使用接口或抽象类，而不是实现类，这主要是实现里氏替换原则的一个要求
                  抽象层尽量保持稳定，一旦确定就不要修改
        元数据控件模块
            编程是一个很苦很累的活,那怎么才能减轻压力呢？答案就是尽量使用元数据来控制程序的行为
            减少重复开发,什么是元数据呢？用来描述环境和数据的数据,通俗的说就是配置参数,参数可以
            从文件获得,也可以从数据中获取
        制定项目章程
            在一个团队中,建立项目章程是非常重要的,因为章程是所用人员都必须遵守的约定,对项目来说
            约定优于配置,这比通过接口或抽象类进行越是效率更高,而扩展性一点也没有减少
        封装变化
            将相同的变化封装到一个接口或抽象类中
             将不同的变化封装到不同的接口或抽象类中,不应该用两个不同的变化出现在一个同一个接口或抽象
             类中
里氏替换原则
    主要阐述了有些继承的原则,也就是什么时候应该使用继承,什么不应该使用继承
    以及其中蕴含的原来,里氏替换是继承服用的基础,他反应了基类与子类的关系,对
    开闭原则的补充,是对实现抽象化的具体步骤

    作用
        里氏替换原则是实现开闭原则的重要方式之一
        他克服类继承中重写父类造成的可复用性变差的确定
        他是动作正确性的保证,即类的扩展不用给已有的系统引入新的错误,降低
        代码出错的可能性
        加强程序的健壮性,同时变更时可以做到非常好的兼容性,提高程序的维护性
        扩展性,降低需求变更是引入的风险

    实现
        子类可以实现父类的抽象方法,但不能覆盖父类的非抽象方法
        子类中可以增加自己特意的方法
        当子类的方法重载父类的方法时,方法的前置条件(方法的输入参数)要比父类方法更宽松
        当子类的方法实现父类的方法时(重载\重写或实现抽象方法),方法的后置条件 及方法
        输出\返回值 要不父类的方法更严格或相等
    通过重写父类的方法来说来完成 新的功能写起来虽然简单，但是整个继承体系的可复用性会
    比较差特别是运用多态比较频繁时,程序运行出错的积累非常大
    如果程序违背了里氏替换原则,则继承类的对象在基类出现的地方会出现运行错误,这时其修正
    取消原来的继承关系,重写设计他们的关系

依赖倒转 DIP
      高层模块不应该依赖底层模块,两者都应该依赖其抽象;抽象不应该依赖细节,细节应该依赖抽象
      面向接口编程,不要面向实现编程
      依赖倒转是实现开闭原则的重要途径之一，他降低了客户与实现模块之间的耦合
      在软件设计中,细节具有多变性,而抽象层相对稳定,因此一抽象为基础搭建起来的框架
      要比细节为基础搭建起来的框架要稳定的多,这里的抽象值得是接口 or 抽象类,而细节是指的具体实现
      使用接口或者抽象类的目的是制定好规范和契约，而不去涉及任何具体的操作，把展现细节的任务交给它们的实现类去完成。

     作用
        依赖倒转可以降低类间的耦合性
        依赖倒转可以提高形体的稳定性
        依赖倒转可以减少并行开发引起的风险
        依赖倒转可以提高代码的可读性 可维护性
     实现
        每个类尽量提供接口 or 抽象类 或者两者都具备
        变量的声明类型尽量是接口 or 抽象类
        任何类都不应该从具体类派生
        使用继承是尽量遵循里氏替换

接口隔离
      要求程序员尽量将臃肿庞大的接口拆分成更小和更具体的接口,让接口中只包含与客户感兴趣的方法
      一个类对另一个类的依赖应该建立最小的接口上
      要为各个类建立它们需要的专用接口，而不要试图去建立一个很庞大的接口供所有依赖它的类去调用。

      接口隔离 与 单一职责 区别
      单一职责注重的是职责 , 而接口隔离原则注重的对接口依赖的隔离
      单一职责主要是约束类, 他针对是程序中的实现和细节；接口隔离原则主要约束接口，主要针对抽象和程序的整体架构的搭建

      优点
           将臃肿庞大的接口分解为多个粒度的小接口,可以预防外来变更的扩散,提高系统的灵活性和可维护性
           接口隔离提高类系统的内聚性,减少了为外来交互,降低了系统的耦合性
           如果接口的粒度大小定义合理,能够保证系统的稳定性;但是,如果定义小了,则会造成 接口数量过多,使设计复杂化;如果定义太大,
           灵活性降低,无法提供定制服务,给整个项目带来无法预料的风险
           使用多个专门的接口还能够体现对象的层次,因为可以通过接口的继承,实现对总接口的定义
           能减少项目工程的代码冗余,过大的大接口里面通常放置许多不能用的方法,当实现这个接口的时候,被迫设计冗余的代码

      实现
            接口尽量小,但是要有限度,一个接口只服务于一个子模块或业务逻辑
            为依赖接口的类定制服务. 只提供调用者需要大的方法,屏蔽不需要的方法
            了解环境,拒接盲从,每个项目或产品都有选定的环境因素,环境不同,接口拆分标准就不同深入了解业务逻辑
            提高内聚,减少对外交互,使接口用最少的方法去完成最多的事情


迪米特法则
        又称为最少知道法则
     定义
        只与你的直接朋友交谈,不与陌生朋友 说话,意思就是两个软件下实体无需直接通信,那么就不应该发生直接
        的相互调用,可以通过第三方转发该调用,其目的是降低类之间的耦合度,提高模块的相对独立性
     直接朋友
        每个对象都会与其他对象有耦合关系,只要两个对象有耦合关系,我们就说这个对象就是朋友关系
        耦合的方式有很多，依赖，关联，组合，聚合等，我们称出现在成员变量,方法参数,方法返回值
        的类为直接朋友,而出现在局部变量中的类不是直接朋友,也就是说,陌生类最好不要一局部变量方式出现在类的内部中

     优点
        迪米特法则的核心就是降低类之间的耦合,提高了模块相对独立性
        由于每个类都减少不必要的依赖,一次迪米特法则只是要求降低类间 or 对象之间的耦合关系 并不是要求完全没有依赖关系
        由于亲和度降低,从而提高类的可复用率和系统的扩展性

     实现
         从依赖这的角度来说,只依赖应该依赖的对象
         从被依赖者的角度来说,只暴露应该暴露的方法

     注意
        在类的划分上,应该创建弱耦合的类,类与类之间的耦合越弱,就 越有利于实现可复用的目标
        在类的结构设计上,尽量降低类成员的访问权限
        在类的设计上,优先考虑将一个类设置为一个不变的类
        在对其他类的引用上,将引用其他对象的次数降低最低
        不暴露类的属性成员,而应该提供相应的访问器 set get
        谨慎使用序列化功能


合成复用原则
        合成复用原则  组合/聚合复用原则 他要求在软件复用时 要尽量先使用组合或者聚合等关联关系来实现,其次才考虑使用继承关系来实现

        如果要使用继承关系,则必须严格遵循里氏替换原则,合成复用原则里氏替换原则相辅成的,两者都是开闭原则的具体实现规范





































































